from typing import Optional
from aiogram.types import (
    InlineKeyboardMarkup, 
    InlineKeyboardButton,
    InputMediaPhoto,
    CallbackQuery,
    FSInputFile
)
from aiogram.types import BufferedInputFile  # –î–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import Config
import asyncio
import os
import logging
import matplotlib.pyplot as plt
import numpy as np
from io import BytesIO
from datetime import datetime

logger = logging.getLogger('VisualInterface')

class UIBuilder:
    THEMES = {
        'default': {
            'primary': 'üîµ',
            'success': 'üü¢',
            'warning': 'üü°',
            'error': 'üî¥',
            'text': '‚ö™'
        },
        'dark': {
            'primary': 'üåë',
            'success': 'üåë',
            'warning': 'üåï',
            'error': 'üî•',
            'text': '‚ö™'
        },
        'colorful': {
            'primary': 'üåà',
            'success': '‚úÖ',
            'warning': '‚ö†Ô∏è',
            'error': '‚ùå',
            'text': 'üìù'
        }
    }

    def __init__(self, config: Config):
        self.config = config
        self.user_themes = {}
    
    def get_theme(self, user_id: int) -> dict:
        return self.user_themes.get(user_id, self.THEMES['default'])
    
    async def main_menu(self, user_id: int) -> Optional[InlineKeyboardMarkup]:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if user_id != self.config.OWNER_ID:
            return None
        
        theme = self.get_theme(user_id)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        buttons = [
            [
                InlineKeyboardButton(
                    text=f"{theme['primary']} –ì–ª–∞–≤–Ω–∞—è",
                    callback_data="main"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{theme['text']} –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
                    callback_data="monitoring"
                ),
                InlineKeyboardButton(
                    text=f"{theme['text']} –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                    callback_data="settings"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{theme['text']} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    callback_data="stats"
                ),
                InlineKeyboardButton(
                    text=f"{theme['text']} RSS –õ–µ–Ω—Ç—ã",
                    callback_data="rss_list"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{theme['success']} –ó–∞–ø—É—Å—Ç–∏—Ç—å",
                    callback_data="start_bot"
                ),
                InlineKeyboardButton(
                    text=f"{theme['warning']} –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                    callback_data="stop_bot"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üé® –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É",
                    callback_data="change_theme"
                )
            ]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    async def back_to_settings(self) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="settings"
        )
        return builder.as_markup()
    
    async def back_button(self) -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="settings"
        )
        return builder.as_markup()

    async def stats_visualization(self, stats: dict) -> tuple:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º
            plt.figure(figsize=(10, 6))
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ (–ø—Ä–∏–º–µ—Ä)
            hours = list(range(24))
            posts = [stats.get(f'hour_{h}', 0) for h in hours]
            
            plt.bar(hours, posts, color='#4CAF50')
            plt.title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º')
            plt.xlabel('–ß–∞—Å—ã')
            plt.ylabel('–ü–æ—Å—Ç—ã')
            plt.xticks(hours)
            plt.grid(axis='y', alpha=0.5)
            
            summary = (
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</b>\n\n"
                f"‚ñ∏ –ü–æ—Å—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{stats.get('posts_sent', 0)}</b>\n"
                f"‚ñ∏ –û—à–∏–±–æ–∫: <b>{stats.get('errors', 0)}</b>\n"
                f"‚ñ∏ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π AI: <b>{stats.get('yagpt_used', 0)}</b>\n"
                f"‚ñ∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: <b>{stats.get('images_generated', 0)}</b>\n"
                f"‚ñ∏ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞: <b>{stats.get('avg_processing_time', 0):.2f} —Å–µ–∫</b>\n"
                f"‚ñ∏ –ê–ø—Ç–∞–π–º: <b>{stats.get('uptime', '0:00')}</b>"
            )

            # –í –º–µ—Ç–æ–¥–µ stats_visualization
            buf = BytesIO()
            plt.savefig(buf, format='png', bbox_inches='tight')
            buf.seek(0)
            image_data = buf.getvalue()  # –ü–æ–ª—É—á–∞–µ–º –±–∞–π—Ç—ã
            photo = BufferedInputFile(image_data, filename="stats.png")  # –°–æ–∑–¥–∞–µ–º InputFile
            return summary, InputMediaPhoto(media=photo, caption=summary)
            
        except Exception as e:
            logger.error(f"Stats visualization error: {str(e)}")
            return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", None

    async def settings_menu(self, user_id: int) -> InlineKeyboardMarkup:
        theme = self.get_theme(user_id)
        builder = InlineKeyboardBuilder()
        
        builder.button(
            text=f"{theme['text']} –û—Å–Ω–æ–≤–Ω—ã–µ", 
            callback_data="settings_general"
        )
        builder.button(
            text=f"{theme['text']} –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", 
            callback_data="settings_images"
        )
        builder.button(
            text=f"{theme['text']} AI", 
            callback_data="settings_ai"
        )
        builder.button(
            text=f"{theme['text']} RSS", 
            callback_data="settings_rss"
        )
        builder.button(
            text=f"{theme['text']} –û–ø–æ–≤–µ—â–µ–Ω–∏—è", 
            callback_data="settings_notify"
        )
        builder.button(
            text=f"{theme['primary']} –ù–∞–∑–∞–¥", 
            callback_data="main_menu"
        )
        
        builder.adjust(2, 2, 2, 1)
        return builder.as_markup()

    async def image_settings_view(self, user_id: int) -> tuple:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        theme = self.get_theme(user_id)
        text = (
            "üñº <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>\n\n"
            f"‚ñ∏ –ò—Å—Ç–æ—á–Ω–∏–∫: <b>{self.config.IMAGE_SOURCE.capitalize()}</b>\n"
            f"‚ñ∏ –†–µ–∑–µ—Ä–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {'–í–∫–ª' if self.config.IMAGE_FALLBACK else '–í—ã–∫–ª'}\n"
            f"‚ñ∏ –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞: <code>{self.config.TEXT_COLOR}</code>\n"
            f"‚ñ∏ –¶–≤–µ—Ç –æ–±–≤–æ–¥–∫–∏: <code>{self.config.STROKE_COLOR}</code>\n"
            f"‚ñ∏ –®–∏—Ä–∏–Ω–∞ –æ–±–≤–æ–¥–∫–∏: <b>{self.config.STROKE_WIDTH}px</b>"
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            from PIL import Image, ImageDraw, ImageFont
            img = Image.new('RGB', (400, 200), (40, 40, 60))
            draw = ImageDraw.Draw(img)
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–∞
            font_path = os.path.join(self.config.FONTS_DIR, self.config.DEFAULT_FONT)
            font = ImageFont.truetype(font_path, 32) if os.path.exists(font_path) else ImageFont.load_default()
            
            # –¢–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            draw.text(
                (200, 100), 
                "–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞", 
                fill=tuple(self.config.TEXT_COLOR),
                stroke_fill=tuple(self.config.STROKE_COLOR),
                stroke_width=self.config.STROKE_WIDTH,
                font=font,
                anchor="mm"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
            # –í –º–µ—Ç–æ–¥–µ image_settings_view
            buf = BytesIO()
            img.save(buf, format='PNG')
            buf.seek(0)
            image_data = buf.getvalue()
            photo = BufferedInputFile(image_data, filename="preview.png")
            return text, InputMediaPhoto(media=photo, caption=text)
            
            return text, InputMediaPhoto(media=buf, caption=text)
        except Exception as e:
            logger.error(f"Preview generation failed: {str(e)}")
            return text, None

    async def theme_selector(self, user_id: int) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        
        for theme_name in self.THEMES:
            builder.button(
                text=f"{self.THEMES[theme_name]['primary']} {theme_name.capitalize()}",
                callback_data=f"set_theme_{theme_name}"
            )
        
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="settings"
        )
        
        builder.adjust(2, 1)
        return builder.as_markup()

    async def progress_bar(self, current: int, total: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        bar_length = 10
        filled = int(bar_length * current / total)
        empty = bar_length - filled
        return f"[{'‚ñ†' * filled}{'‚ñ°' * empty}] {current}/{total}"

    async def animated_processing(self, message, process_name: str, duration: int = 5):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å"""
        status_msg = await message.answer(f"üîÑ {process_name}...")
        
        for i in range(1, 11):
            await asyncio.sleep(duration / 10)
            bar = "‚¨õ" * i + "‚¨ú" * (10 - i)
            await status_msg.edit_text(f"‚è≥ {process_name}\n{bar} {i*10}%")
        
        await status_msg.edit_text(f"‚úÖ {process_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    async def rss_feed_status(self, feeds: list) -> str:
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ RSS-–ª–µ–Ω—Ç"""
        lines = ["üì° <b>–°—Ç–∞—Ç—É—Å RSS-–ª–µ–Ω—Ç</b>\n"]
        
        for feed in feeds:
            status_icon = 'üü¢' if feed.get('active', True) else 'üî¥'
            error_icon = f"‚ùóÔ∏è {feed.get('error_count', 0)}" if feed.get('error_count', 0) > 0 else ""
            lines.append(f"{status_icon} {feed['url']} {error_icon}")
        
        return "\n".join(lines)