from collections import deque
import os
import logging
from state_manager import StateManager
from typing import Optional, List
from aiogram import Bot, Dispatcher
from aiogram.types import Message, BotCommand, InputFile, FSInputFile, MenuButtonCommands
from aiogram.enums import MenuButtonType
from aiogram.filters import Command
from config import Config
from bot_controller import BotController

logger = logging.getLogger('AsyncTelegramBot')

class AsyncTelegramBot:
    def __init__(self, token: str, channel_id: str, config: Config):
        self.token = token
        self.channel_id = channel_id
        self.config = config
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        self.controller: Optional[BotController] = None
        
        self._register_handlers()
    
    async def setup_commands(self) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –≤ —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∞"""
        commands = [
            BotCommand(command="start", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
            BotCommand(command="status", description="–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),
            BotCommand(command="stats", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand(command="rss_list", description="–°–ø–∏—Å–æ–∫ RSS-–ª–µ–Ω—Ç"),
            BotCommand(command="rss_add", description="–î–æ–±–∞–≤–∏—Ç—å RSS"),
            BotCommand(command="rss_remove", description="–£–¥–∞–ª–∏—Ç—å RSS"),
            BotCommand(command="pause", description="–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"),
            BotCommand(command="resume", description="–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å"),
            BotCommand(command="settings", description="–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
            BotCommand(command="set", description="–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä"),
            BotCommand(command="clear_history", description="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å—Ç–æ–≤"),
        ]
        await self.bot.set_my_commands(commands)
        await self.bot.set_chat_menu_button(menu_button=MenuButtonCommands(type=MenuButtonType.COMMANDS))
        
    async def send_post(
        self,
        title: str,
        description: str,
        link: str,
        image_path: Optional[str] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –≤ Telegram –∫–∞–Ω–∞–ª —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –°–æ–∫—Ä–∞—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ª–æ–≥–æ–≤
            log_title = title[:50] + "..." if len(title) > 50 else title
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            post_text = f"<b>{title}</b>\n\n{description}\n\n<a href='{link}'>–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if image_path:
                if not os.path.exists(image_path):
                    logger.error(f"Image not found: {image_path}")
                    return False
                    
                photo = FSInputFile(image_path)
                await self.bot.send_photo(
                    chat_id=self.channel_id,
                    photo=photo,
                    caption=post_text,
                    parse_mode="HTML"
                )
                logger.info(f"Photo post sent: {log_title}")
            else:
                await self.bot.send_message(
                    chat_id=self.channel_id,
                    text=post_text,
                    parse_mode="HTML"
                )
                logger.info(f"Text post sent: {log_title}")
                
            return True
        except Exception as e:
            logger.error(f"Failed to send post '{title[:30]}...': {str(e)}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
            if "Chat not found" in str(e):
                logger.critical("CHANNEL_ID is invalid. Check channel permissions.")
            elif "Forbidden" in str(e):
                logger.critical("Bot has no access to the channel. Add bot as admin.")
            elif "Too Many Requests" in str(e):
                logger.warning("Telegram API rate limit exceeded. Reducing posting frequency.")
                
            return False
    
    def _register_handlers(self) -> None:
        self.dp.message.register(self.handle_start, Command("start", "help"))
        self.dp.message.register(self.handle_status, Command("status"))
        self.dp.message.register(self.handle_stats, Command("stats"))
        self.dp.message.register(self.handle_rss_list, Command("rss_list"))
        self.dp.message.register(self.handle_rss_add, Command("rss_add"))
        self.dp.message.register(self.handle_rss_remove, Command("rss_remove"))
        self.dp.message.register(self.handle_pause, Command("pause"))
        self.dp.message.register(self.handle_resume, Command("resume"))
        self.dp.message.register(self.handle_settings, Command("settings"))
        self.dp.message.register(self.handle_set, Command("set"))
        self.dp.message.register(self.handle_clear_history, Command("clear_history"))

    async def is_owner(self, message: Message) -> bool:
        return message.from_user is not None and message.from_user.id == self.config.OWNER_ID

    async def handle_start(self, message: Message) -> None:
        help_text = (
            "ü§ñ <b>RSS Bot with AI Enhancement</b>\n\n"
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/rss_list - –°–ø–∏—Å–æ–∫ RSS\n"
            "/rss_add [url] - –î–æ–±–∞–≤–∏—Ç—å RSS\n"
            "/rss_remove [N] - –£–¥–∞–ª–∏—Ç—å RSS\n"
            "/pause - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
            "/resume - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å\n"
            "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "/set [param] [value] - –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>/rss_add https://example.com/rss</code>\n"
            "<code>/set POSTS_PER_HOUR 10</code>"
        )
        await message.answer(help_text, parse_mode="HTML")

    async def handle_status(self, message: Message) -> None:
        if not await self.is_owner(message):
            return
            
        if self.controller is None:
            await message.answer("‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return
            
        status = self.controller.get_status_text()
        await message.answer(status, parse_mode="HTML")

    async def handle_stats(self, message: Message) -> None:
        if not await self.is_owner(message):
            return
            
        if self.controller is None or not hasattr(self.controller, 'stats'):
            await message.answer("‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        stats = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"–ü–æ—Å—Ç–æ–≤: {self.controller.stats.get('posts_sent', 0)}\n"
            f"–û—à–∏–±–æ–∫: {self.controller.stats.get('errors', 0)}\n"
            f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {self.controller.stats.get('images_generated', 0)}\n"
            f"–î—É–±–ª–∏–∫–∞—Ç–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {self.controller.stats.get('duplicates_rejected', 0)}\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π YandexGPT: {self.controller.stats.get('yagpt_used', 0)}\n"
            f"–û—à–∏–±–æ–∫ YandexGPT: {self.controller.stats.get('yagpt_errors', 0)}"
        )
        await message.answer(stats, parse_mode="HTML")

    async def handle_rss_list(self, message: Message) -> None:
        if not await self.is_owner(message):
            return
            
        lines: List[str] = ["üìö <b>–¢–µ–∫—É—â–∏–µ RSS-–ª–µ–Ω—Ç—ã:</b>"]
        for i, url in enumerate(self.config.RSS_URLS, 1):
            lines.append(f"{i}. {url}")
        
        lines.append("\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        lines.append("<code>/rss_remove [–Ω–æ–º–µ—Ä]</code>")
        lines.append("–ü—Ä–∏–º–µ—Ä: <code>/rss_remove 2</code>")
        
        await message.answer("\n".join(lines), parse_mode="HTML")

    async def handle_rss_add(self, message: Message) -> None:
        if not await self.is_owner(message):
            return
            
        if message.text is None:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return
            
        args = message.text.split()
        if len(args) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ URL RSS-–ª–µ–Ω—Ç—ã")
            return
        
        new_url = args[1]
        if new_url in self.config.RSS_URLS:
            await message.answer("‚ö†Ô∏è –≠—Ç–∞ RSS-–ª–µ–Ω—Ç–∞ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ")
            return
        
        self.config.RSS_URLS.append(new_url)
        await message.answer(f"‚úÖ RSS-–ª–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {new_url}")

    async def handle_rss_remove(self, message: Message) -> None:
        if not await self.is_owner(message):
            return
            
        if message.text is None:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return
            
        args = message.text.split()
        if len(args) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä RSS-–ª–µ–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        try:
            index = int(args[1]) - 1
            if 0 <= index < len(self.config.RSS_URLS):
                removed = self.config.RSS_URLS.pop(index)
                await message.answer(f"‚úÖ RSS-–ª–µ–Ω—Ç–∞ —É–¥–∞–ª–µ–Ω–∞: {removed}")
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä RSS-–ª–µ–Ω—Ç—ã")
        except ValueError:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")

    async def handle_pause(self, message: Message) -> None:
        if not await self.is_owner(message):
            return
            
        if self.controller is None:
            await message.answer("‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return
            
        if self.controller.is_running:
            await self.controller.stop()
            await message.answer("‚è∏Ô∏è –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            await message.answer("‚ÑπÔ∏è –ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def handle_resume(self, message: Message) -> None:
        if not await self.is_owner(message):
            return
            
        if self.controller is None:
            await message.answer("‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return
            
        if not self.controller.is_running:
            await self.controller.start()
            await message.answer("‚ñ∂Ô∏è –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            await message.answer("‚ÑπÔ∏è –ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

    async def handle_settings(self, message: Message) -> None:
        if not await self.is_owner(message):
            return
            
        source_mapping = {
            'template': '–®–∞–±–ª–æ–Ω—ã',
            'original': '–û—Ä–∏–≥–∏–Ω–∞–ª—ã',
            'none': '–ù–µ—Ç'
        }
        
        settings = (
            "‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            f"YandexGPT: {'üü¢ –í–∫–ª' if not self.config.DISABLE_YAGPT else 'üî¥ –í—ã–∫–ª'}\n"
            f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {'üü¢ –í–∫–ª' if self.config.ENABLE_IMAGE_GENERATION else 'üî¥ –í—ã–∫–ª'}\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {source_mapping.get(self.config.IMAGE_SOURCE, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {'üü¢ –í–∫–ª' if self.config.IMAGE_FALLBACK else 'üî¥ –í—ã–∫–ª'}\n"
            f"–ü–æ—Å—Ç–æ–≤/—á–∞—Å: {self.config.POSTS_PER_HOUR}\n"
            f"–ú–æ–¥–µ–ª—å YandexGPT: {self.config.YAGPT_MODEL}"
        )
        await message.answer(settings, parse_mode="HTML")

    async def handle_set(self, message: Message) -> None:
        if not await self.is_owner(message):
            return
            
        if message.text is None:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return
            
        args = message.text.split()
        if len(args) < 3:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set [–ø–∞—Ä–∞–º–µ—Ç—Ä] [–∑–Ω–∞—á–µ–Ω–∏–µ]")
            return
        
        param = args[1].upper()
        value = " ".join(args[2:])
        
        ALLOWED_PARAMS = {
            'POSTS_PER_HOUR': {
                'type': int,
                'validator': lambda x: 1 <= x <= 60,
                'error_msg': '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 60'
            },
            'MIN_DELAY_BETWEEN_POSTS': {
                'type': int,
                'validator': lambda x: x >= 10,
                'error_msg': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 10 —Å–µ–∫—É–Ω–¥'
            },
            'CHECK_INTERVAL': {
                'type': int,
                'validator': lambda x: x >= 60,
                'error_msg': '–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –º–µ–Ω–µ–µ 60 —Å–µ–∫—É–Ω–¥'
            },
            'ENABLE_IMAGE_GENERATION': {
                'type': bool,
                'validator': None,
                'error_msg': ''
            },
            'DISABLE_YAGPT': {
                'type': bool,
                'validator': None,
                'error_msg': ''
            },
            'YAGPT_MODEL': {
                'type': str,
                'validator': lambda x: x in ['yandexgpt-lite', 'yandexgpt-pro'],
                'error_msg': '–î–æ–ø—É—Å—Ç–∏–º—ã–µ –º–æ–¥–µ–ª–∏: yandexgpt-lite, yandexgpt-pro'
            },
            'YAGPT_TEMPERATURE': {
                'type': float,
                'validator': lambda x: 0.1 <= x <= 1.0,
                'error_msg': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0.1 –¥–æ 1.0'
            }
        }
        
        if param not in ALLOWED_PARAMS:
            await message.answer(f"‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä {param} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            return
        
        param_info = ALLOWED_PARAMS[param]
        param_type = param_info['type']
        
        try:
            if param_type is bool:
                converted_value = value.lower() in ['true', '1', 'yes', 'on']
            else:
                converted_value = param_type(value)
            
            if param_info['validator'] and not param_info['validator'](converted_value):
                raise ValueError(param_info['error_msg'])
            
            setattr(self.config, param, converted_value)
            await message.answer(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä {param} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {value}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª
            self.config.save_to_env_file(param, str(converted_value))
        except (TypeError, ValueError) as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
    async def handle_clear_history(self, message: Message) -> None:
        if not await self.is_owner(message):
            return
            
        if self.controller is None:
            await message.answer("‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return
            
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            self.controller.state.state['sent_entries'] = {}
            await message.answer("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞! –ë–æ—Ç –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.")
        except Exception as e:
            logger.error(f"Error clearing history: {str(e)}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

    async def close(self) -> None:
        await self.bot.session.close()